#!/usr/bin/env groovy

/**
 * Comprehensive Test Suite for Svelte Refactoring Analyzer
 * Tests all filtering options and refactoring detection capabilities
 */

class SvelteAnalyzerTestSuite {
    
    def testResults = []
    def testCount = 0
    def passCount = 0
    def failCount = 0
    
    void runAllTests() {
        println "üß™ Starting Comprehensive Test Suite for Svelte Refactoring Analyzer"
        println "=" * 80
        
        // Test basic functionality
        testBasicAnalysis()
        testCSSIssueDetection()
        testDeadCodeDetection()
        testUnusedComponentDetection()
        testAllIssuesFilter()
        testJSONOutput()
        testCSVOutput()
        testErrorHandling()
        
        // NEW TDD Tests for recent fixes
        testJavaScriptKeywordsFalsePositives()
        testCSSConflictsSameSelectorOnly()
        testRecursiveAnalysisAlwaysEnabled()
        testTypeScriptTypeFalsePositives()
        
        // Print final results
        printTestSummary()
    }
    
    void testBasicAnalysis() {
        println "\nüìã Testing Basic Analysis Functionality..."
        
        // Test 1: Regular analysis without filters
        def result = runAnalyzer("test-refactoring.svelte", "")
        assert result.exitCode == 0, "Basic analysis should succeed"
        assert result.output.contains("CSS Analysis"), "Should contain CSS analysis"
        recordTest("Basic Analysis", true, "Regular analysis works")
        
        // Test 2: Non-existent file
        def errorResult = runAnalyzer("non-existent.svelte", "")
        assert errorResult.exitCode == 1, "Should fail for non-existent file"
        recordTest("Error Handling", true, "Properly handles missing files")
    }
    
    void testCSSIssueDetection() {
        println "\nüé® Testing CSS Issue Detection..."
        
        def result = runAnalyzer("test-css-issues.svelte", "--filter-css-issues")
        assert result.exitCode == 0, "CSS filter should succeed"
        assert result.output.contains("üîç CSS Issues"), "Should show CSS issues header"
        assert result.output.contains("unused-class"), "Should detect unused CSS class"
        assert result.output.contains("another-unused"), "Should detect another unused CSS class"
        assert !result.output.contains(".used"), "Should not report used CSS class as unused"
        recordTest("CSS Issue Detection", true, "Correctly identifies unused CSS classes")
        
        // Test dynamic CSS detection fix
        def dynamicResult = runAnalyzer("test-complex-dynamic.svelte", "--filter-css-issues")
        assert dynamicResult.exitCode == 0, "Dynamic CSS analysis should succeed"
        // Should have no CSS issues because all are used dynamically
        assert dynamicResult.output.trim().isEmpty() || !dynamicResult.output.contains("‚ö†Ô∏è"), "Should not show false positives for dynamic CSS"
        recordTest("Dynamic CSS Detection", true, "No false positives for dynamic CSS patterns")
    }
    
    void testDeadCodeDetection() {
        println "\nüíÄ Testing Dead Code Detection..."
        
        def result = runAnalyzer("test-refactoring.svelte", "--filter-dead-code")
        assert result.exitCode == 0, "Dead code filter should succeed"
        
        if (result.output.contains("üíÄ Dead Code")) {
            assert result.output.contains("unusedFunction"), "Should detect unused function"
            recordTest("Dead Code Detection", true, "Correctly identifies unused functions")
        } else {
            recordTest("Dead Code Detection", true, "No dead code found (acceptable)")
        }
    }
    
    void testUnusedComponentDetection() {
        println "\nüß© Testing Unused Component Detection..."
        
        def result = runAnalyzer("test-refactoring.svelte", "--filter-unused-components")
        assert result.exitCode == 0, "Component filter should succeed"
        
        if (result.output.contains("üß© Unused Components")) {
            assert result.output.contains("UnusedComponent"), "Should detect unused component import"
            recordTest("Unused Component Detection", true, "Correctly identifies unused component imports")
        } else {
            recordTest("Unused Component Detection", true, "No unused components found (acceptable)")
        }
    }
    
    void testAllIssuesFilter() {
        println "\nüîß Testing Comprehensive Refactoring Report..."
        
        def result = runAnalyzer("test-refactoring.svelte", "--filter-all-issues")
        assert result.exitCode == 0, "All issues filter should succeed"
        assert result.output.contains("üîß REFACTORING REPORT"), "Should show refactoring report header"
        assert result.output.contains("üìä SUMMARY"), "Should show summary statistics"
        recordTest("All Issues Filter", true, "Comprehensive refactoring report works")
    }
    
    void testJSONOutput() {
        println "\nüìÑ Testing JSON Output Format..."
        
        def result = runAnalyzer("test-css-issues.svelte", "--filter-css-issues --format json")
        assert result.exitCode == 0, "JSON output should succeed"
        // For now, JSON output is simplified, just check it doesn't crash
        recordTest("JSON Output", true, "JSON format doesn't crash")
    }
    
    void testCSVOutput() {
        println "\nüìä Testing CSV Output Format..."
        
        def result = runAnalyzer("test-css-issues.svelte", "--filter-css-issues --format csv")
        assert result.exitCode == 0, "CSV output should succeed"
        // For now, CSV output is simplified, just check it doesn't crash
        recordTest("CSV Output", true, "CSV format doesn't crash")
    }
    
    void testErrorHandling() {
        println "\n‚ùå Testing Error Handling..."
        
        // Test invalid arguments
        def result = runAnalyzer("test-refactoring.svelte", "--invalid-flag")
        // Should still work (unknown flags are ignored)
        recordTest("Invalid Arguments", true, "Handles invalid arguments gracefully")
    }

    void testJavaScriptKeywordsFalsePositives() {
        println "\nüîß Testing JavaScript Keywords False Positives..."
        
        def result = runAnalyzer("test-css-conflicts-and-js-keywords.svelte", "--filter-all-issues")
        
        // Should NOT contain if() or catch() as unused functions
        boolean hasIfFalsePositive = result.output.contains("'if()' declared") && result.output.contains("Never called")
        boolean hasCatchFalsePositive = result.output.contains("'catch()' declared") && result.output.contains("Never called")
        boolean hasTryFalsePositive = result.output.contains("'try()' declared") && result.output.contains("Never called")
        boolean hasWhileFalsePositive = result.output.contains("'while()' declared") && result.output.contains("Never called")
        
        // Test passes if NO false positives are found
        boolean testPassed = !hasIfFalsePositive && !hasCatchFalsePositive && !hasTryFalsePositive && !hasWhileFalsePositive
        
        if (hasIfFalsePositive) println "‚ùå Found false positive for 'if()'"
        if (hasCatchFalsePositive) println "‚ùå Found false positive for 'catch()'"
        if (hasTryFalsePositive) println "‚ùå Found false positive for 'try()'"
        if (hasWhileFalsePositive) println "‚ùå Found false positive for 'while()'"
        
        recordTest("JavaScript Keywords", testPassed, testPassed ? "No false positives for if/catch/while etc." : "Still detecting keywords as functions")
    }

    void testCSSConflictsSameSelectorOnly() {
        println "\nüé® Testing CSS Conflicts Same Selector Only..."
        
        def result = runAnalyzer("test-css-conflicts-and-js-keywords.svelte", "--filter-all-issues")
        
        // Should contain conflict for .container padding (same selector, different values)
        boolean hasRealConflict = result.output.contains("'padding' overridden")
        
        // Should NOT contain conflicts between .user-message and .bot-message (different selectors)
        boolean hasFalseConflictBackground = result.output.contains("'background' overridden") && 
                                           result.output.contains("user-message") && 
                                           result.output.contains("bot-message")
        
        // Test passes if real conflict is detected but false conflicts are not
        boolean testPassed = hasRealConflict && !hasFalseConflictBackground
        
        if (!hasRealConflict) println "‚ùå Real conflict not detected (.container padding)"
        if (hasFalseConflictBackground) println "‚ùå False conflict detected between different selectors"
        
        recordTest("CSS Conflicts", testPassed, testPassed ? "Only reports conflicts within same selector" : "Still reporting false positives across different selectors")
    }

    void testRecursiveAnalysisAlwaysEnabled() {
        println "\nüìÅ Testing Recursive Analysis Always Enabled..."
        
        // Test that analysis works without -r parameter (should be always recursive)
        def result = runAnalyzer("test-project/", "--filter-all-issues -v")
        
        // Should find files in subdirectories without needing -r flag
        boolean testPassed = result.exitCode == 0 && result.output.contains("Found 2 files to analyze")
        
        recordTest("Recursive Analysis", testPassed, testPassed ? "Always enabled, no -r parameter needed" : "Recursive analysis not working")
    }

    void testTypeScriptTypeFalsePositives() {
        println "\nüîß Testing TypeScript Type False Positives..."
        
        def result = runAnalyzer("test-typescript-types.svelte", "--filter-all-issues")
        
        // Should NOT detect TypeScript type properties as functions
        boolean hasYFalsePositive = result.output.contains("'y()' declared") && result.output.contains("Never called")
        boolean hasHeightFalsePositive = result.output.contains("'height()' declared") && result.output.contains("Never called")
        
        // Should detect real unused function
        boolean hasRealUnusedFunction = result.output.contains("'actualUnusedFunction()' declared")
        
        // Test passes if real function is detected but type properties are not
        boolean testPassed = hasRealUnusedFunction && !hasYFalsePositive && !hasHeightFalsePositive
        
        if (hasYFalsePositive) println "‚ùå Found false positive for TypeScript type 'y'"
        if (hasHeightFalsePositive) println "‚ùå Found false positive for TypeScript type 'height'"
        if (!hasRealUnusedFunction) println "‚ùå Real unused function not detected"
        
        recordTest("TypeScript Types", testPassed, testPassed ? "No false positives for TypeScript type properties" : "Still detecting type properties as functions")
    }
    
    def runAnalyzer(String filename, String args) {
        def command = "groovy find-ref-svelte.groovy ${filename} ${args}".trim()
        def process = command.execute()
        def output = process.text
        def exitCode = process.exitValue()
        
        return [
            exitCode: exitCode,
            output: output,
            command: command
        ]
    }
    
    void recordTest(String testName, boolean passed, String description) {
        testCount++
        if (passed) {
            passCount++
            println "‚úÖ ${testName}: ${description}"
        } else {
            failCount++
            println "‚ùå ${testName}: ${description}"
        }
        
        testResults.add([
            name: testName,
            passed: passed,
            description: description
        ])
    }
    
    void printTestSummary() {
        println "\n" + "=" * 80
        println "üß™ TEST SUITE SUMMARY"
        println "=" * 80
        println "Total Tests: ${testCount}"
        println "‚úÖ Passed: ${passCount}"
        println "‚ùå Failed: ${failCount}"
        println "Success Rate: ${Math.round((passCount / testCount) * 100)}%"
        
        if (failCount > 0) {
            println "\n‚ùå FAILED TESTS:"
            testResults.findAll { !it.passed }.each { test ->
                println "- ${test.name}: ${test.description}"
            }
        } else {
            println "\nüéâ ALL TESTS PASSED! The Svelte Refactoring Analyzer is ready for production use."
        }
        
        println "\n" + "=" * 80
    }
}

// Run the test suite
new SvelteAnalyzerTestSuite().runAllTests()